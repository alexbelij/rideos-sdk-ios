// Copyright 2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import Auth0
import JWTDecode
import Lock

public enum LoginMethod {
    case auth0UsernamePassword(userDatabaseId: String)
    case googleOAuth2
}

open class StartupViewController: UIViewController, AuthenticatedViewControllerDelegate, UserDelegate {
    private let viewTransitionAnimationDuration: TimeInterval = 0.5

    private let user: User
    private let loginMethods: [LoginMethod]
    private let userStorageWriter: UserStorageWriter

    private var visibleViewController: UIViewController?

    public init(loginMethods: [LoginMethod],
                user: User = User.currentUser,
                userStorageWriter: UserStorageWriter = UserDefaultsUserStorageWriter()) {
        self.user = user
        self.loginMethods = loginMethods
        self.userStorageWriter = userStorageWriter
        super.init(nibName: nil, bundle: nil)
        self.user.delegate = self
    }

    public required init?(coder _: NSCoder) {
        logFatalError("StartupViewController does not support NSCoder")
        abort()
    }

    open override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = UIColor.white
        refreshView()
    }

    open func createMainViewController(_: String) -> (AuthenticatedUIViewController) {
        fatalError("createMainViewController must be implemented in a subclass")
    }

    func refreshView() {
        user.getAccessToken { accessToken in
            // Ensure this runs on the main thread, the underlying CredentialsManager doesn't guarantee that
            DispatchQueue.main.async {
                self.refreshView(accessToken: accessToken)
            }
        }
    }

    func refreshView(accessToken: String?) {
        guard let accessToken = accessToken else {
            presentLogin()
            return
        }

        do {
            let jwt = try decode(jwt: accessToken)

            // The "subject" is the unique ID for the user that's generated by the authorization server.
            // It's an opaque string that doesn't contain any PII.
            guard let userId = jwt.subject else {
                // Also shouldn't be possible
                logError("No subject in access token!")
                presentLogin()
                return
            }

            userStorageWriter.set(userId: userId)

            presentMainView(userId)
        } catch let error as NSError {
            // Bad token? That's weird, just try re-logging-in
            logError("StartupViewController: \(error.localizedDescription)")
            presentLogin()
        }
    }

    private func displayViewController(_ newController: UIViewController) {
        DispatchQueue.main.async {
            if let activeViewController = self.visibleViewController {
                activeViewController.willMove(toParent: nil)
            }

            self.addChild(newController)
            newController.view.frame = self.view.frame

            if let activeViewController = self.visibleViewController {
                // Transition with animation
                self.transition(from: activeViewController, to: newController,
                                duration: self.viewTransitionAnimationDuration,
                                options: .transitionCrossDissolve,
                                animations: nil,
                                completion: { _ in
                                    activeViewController.removeFromParent()
                                    newController.didMove(toParent: self)
                })
            } else {
                self.view.addSubview(newController.view)
                newController.didMove(toParent: self)
            }

            self.visibleViewController = newController
        }
    }

    func presentLogin() {
        let lock = Lock.classic()
            .withOptions { options in
                options.allowShowPassword = false
                // TODO: move this to config?
                options.audience = "https://rideos.ai/"
                options.autoClose = false
                options.oidcConformant = true
                // Disable 1password support
                options.passwordManager.enabled = false
                options.scope = User.scopes

                // Enable custom domain support
                // TODO(fyhuang): auth0 support says this CDN is valid for "the US region".
                // Will we have to change this later?
                // <https://support.auth0.com/tickets/00413423>
                options.configurationBaseURL = URL(string: "https://cdn.auth0.com")
            }
            .withStyle { style in
                // TODO(mrm): improve styling
                style.headerColor = .white
                style.hideTitle = true
                style.logo = LazyImage(name: "AppIcon")
                style.primaryColor = .blue
            }
            .onAuth { credentials in
                if !self.user.updateCredentials(credentials) {
                    logError("Failed to store credentials in keychain")
                }
                self.refreshView()
            }
            .withConnections { connections in
                self.loginMethods.forEach {
                    switch $0 {
                    case let .auth0UsernamePassword(userDatabaseId):
                        connections.database(name: userDatabaseId,
                                             requiresUsername: false,
                                             passwordPolicy: .good())
                    case .googleOAuth2:
                        connections.social(name: "google-oauth2", style: .Google)
                    }
                }
            }
            .onError { error in
                print("StartupViewController: auth failure: \(error.localizedDescription)")
            }

        displayViewController(LockViewController(lock: lock))
    }

    func presentMainView(_ userId: String) {
        DispatchQueue.main.async {
            let mainViewController = self.createMainViewController(userId)
            mainViewController.delegate = self
            self.displayViewController(mainViewController)
        }
    }

    // MARK: AuthenticatedViewControllerDelegate

    public func user(didLogout _: AuthenticatedViewController) {
        if !user.clearCredentials() {
            logError("Failed to remove credentials on logout")
        }
        refreshView(accessToken: nil)
    }

    // MARK: UserDelegate

    func credentials(areInvalid user: User) {
        // No need to do anything if the user logged out already
        if user.hasCredentials() {
            refreshView(accessToken: nil)
        }
    }
}
